{"version":3,"sources":["util/constant.js","components/Map.js","actions/actionTypes.js","actions/markerActions.js","components/AddMarkers.js","components/EditDelete.js","components/Marker.js","App.js","serviceWorker.js","reducers/markerReducer.js","middleware/index.js","index.js"],"names":["MAP_OPTIONS","zoom","center","lat","lng","Map","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","googleMap","window","google","maps","document","getElementById","this","props","id","options","onMapLoad","_this","onScriptLoad","mapScript","createElement","type","src","MAP_URL","firstScriptElement","getElementsByTagName","parentNode","insertBefore","addEventListener","event","React","data-test","className","Component","NOTIFY","saveMarkers","markers","getAllLatLongs","latLongs","addStatus","status","elementToEdit","notification","message","readMarkers","dispatch","axios","get","AddMarker","call","state","location","searchResults","loading","selectedlatlongs","_this2","clearAllMarkers","map","setCenter","Number","long","createMarker","then","res","latLongResponse","data","addMarkerProp","latLongsArray","i","length","setMap","_this3","clearError","place","setState","notifyError","getLatLong","response","latlongs","ele","lon","display_name","edit","catch","error","target","_this4","onChange","e","setlocation","onClick","showMarkedPlaces","createMarkers","connect","_objectSpread","url","GEO_CODE_URL","post","EditDelete","preventDefault","infowindow","close","_this$props","placeObject","InfoWindow","content","forEach","index","open","selectedElement","_this$props2","splice","stopPropagation","deleteMarker","clearMarker","latLongElement","editMarker","addInfoWindow","delete","put","Marker","addMarker","latlongsArray","_step","_iterator","_createForOfIteratorHelper","s","n","done","markerEle","newMarker","push","err","f","saveMap","position","App","Boolean","hostname","match","initialState","applyMiddleware","thunk","store","createStore","undefined","action","middleware","ReactDOM","render","Provider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.514141db.chunk.js","sourcesContent":["export const GEO_CODE_URL='https://eu1.locationiq.com/v1/search.php';\nexport const GEOCODE_ACCESS_TOKEN=\"pk.c61edb80b5453ae24c31c18b3a0c9f50\";\nexport const GOOGLEMAP_TOKEN=\"AIzaSyDD48XLaImS9m7ssNrOF0-Yt6ZR0aZCPec\";\nexport const MAP_URL='https://maps.googleapis.com/maps/api/js';\nexport const MAP_OPTIONS={\n    zoom: 4,\n                center: {\n                    lat: 12.9716,\n                    lng: 77.5946\n                }\n}\n","import React,{Component} from 'react';\nimport {MAP_URL,GOOGLEMAP_TOKEN} from '../util/constant';\n\nexport default class Map extends Component{\n    \n    onScriptLoad(){\n        //create map\n        let googleMap=new window.google.maps.Map(document.getElementById(this.props.id),this.props.options);\n        //call callback function to create marker and other functionalities\n        this.props.onMapLoad(googleMap);\n    }\n    componentDidMount(){\n        if(!window.google){\n            let mapScript=document.createElement(\"script\");\n            mapScript.type=\"text/javascript\"\n            mapScript.src=MAP_URL+'?key='+GOOGLEMAP_TOKEN;\n            let firstScriptElement=document.getElementsByTagName(\"script\")[0];\n            firstScriptElement.parentNode.insertBefore(mapScript,firstScriptElement);//insuring that map script is the first to load\n            mapScript.addEventListener(\"load\",(event)=>{\n                //call this method after the script is loaded\n                this.onScriptLoad()\n            })\n        } else {\n            this.onScriptLoad();\n        }\n    }\n    render(){\n        return(\n            <div id={this.props.id} data-test=\"mapComponent\" className=\"map\"></div>\n        )\n    }\n}","export const SAVE_MARKERS=\"saveMarkers\";\nexport const GET_LATLONGS=\"getAllLatLongs\";\nexport const ERROR=\"error\";\nexport const CLEAR_ERROR=\"clearError\";\nexport const SAVE_STATUS=\"saveStatus\";\nexport const SAVE_MAP=\"saveMap\";\nexport const NOTIFY=\"Notification\";\n","import axios from \"axios\";\nimport {GEO_CODE_URL,GEOCODE_ACCESS_TOKEN} from '../util/constant';\nimport {SAVE_MARKERS,GET_LATLONGS,ERROR,CLEAR_ERROR,SAVE_STATUS,SAVE_MAP,NOTIFY} from './actionTypes';\n\n//save the markers array to the store\nexport function saveMarkers(markers){\n    return {\n        markers,type:SAVE_MARKERS\n    }\n}\n//get all the latlongs series and save it to the store\nexport function getAllLatLongs(latLongs){\n    return {type:GET_LATLONGS,latLongs}\n}\n\nexport function notifyError(error){\n    return {\n        type:ERROR,\n        error\n    }\n}\n\nexport function clearError(){\n    return {\n        type:CLEAR_ERROR,\n    }\n}\n\nexport function addStatus(status,elementToEdit){\n    return {\n        status,\n        elementToEdit,\n        type:SAVE_STATUS\n    }\n}\n\nexport function saveMap(map){\n    return {\n        map,\n        type:SAVE_MAP\n    }\n}\n\nexport function notification(message){\n    return {\n        type:NOTIFY,\n        message\n    }\n}\n\n// Async Actions\nexport function editMarker(latlongs){\n    return(dispatch)=>{\n        axios.put('/marker/editMarker',latlongs).then((res)=>{\n            dispatch(notification(\"marker edited successfully\"));\n        })\n    }      \n}\n\nexport function deleteMarker(latlongs){\n    return(dispatch)=>{\n        axios.delete('/marker/deleteMarker',{data:latlongs}).then((res)=>{\n            dispatch(notification(\"marker deleted successfully\"));\n        })\n    }      \n}\n//read all the places from the search string\nexport function getLatLong(place){\n    let url=GEO_CODE_URL+'?key='+GEOCODE_ACCESS_TOKEN+'&q='+place+'&format=json'\n    return(dispatch)=>{\n        return axios.get(url);\n    }\n}\n//read all the available latlongs\nexport function readMarkers(){\n    return(dispatch)=>{\n        return axios.get('/marker/getMarkers')\n    }\n}\n//Add a new latlong object to the existing set\nexport function createMarker(latlongs){\n    return(dispatch)=>{\n        return axios.post('/marker/addMarker',latlongs)\n    }       \n}\n\n\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport {getLatLong,createMarker,readMarkers,addStatus,saveMarkers,getAllLatLongs,notification,notifyError,clearError} from '../actions/markerActions';\n\nclass AddMarker extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            location:props.elementToEdit||\"\",\n            searchResults:[],\n            loading:false\n        }\n    }\n    //add new markers to map\n    createMarkers(selectedlatlongs){\n        \n        this.props.saveMarkers([]);//removing all the markers from store before adding new\n        this.clearAllMarkers();\n        this.props.map.setCenter({lat: Number(selectedlatlongs.lat), lng: Number(selectedlatlongs.long)})//recentering for the new location\n        //Finally creating new markers and saving them to store and changing to display view    \n        this.props.createMarker(selectedlatlongs).then((res)=>{\n                this.props.readMarkers().then((latLongResponse)=>{\n                    this.props.getAllLatLongs(latLongResponse.data)\n                    this.props.addMarkerProp(this.props.map,this.props.latLongsArray);\n                    this.props.notification(\"marker created successfully\");\n                    if(this.props.status===\"add\"){\n                        this.props.addStatus(\"display\");\n                    }\n                });\n            });\n    }\n    //removing all markers from map\n    clearAllMarkers(){\n        let {markers}=this.props;\n        for(let i=0;i<markers.length;i++){\n            markers[i].setMap(null);\n        }\n    }\n    //search results for the entered text in loaction input\n    searchResults(){\n        this.props.clearError();\n        let place=this.state.location;\n        this.setState({loading:true});\n        if(place===\"\"){\n            this.setState({searchResults:[],location:\"\",loading:false});\n            this.props.notifyError(\"Please enter location to search\");\n        } else {\n            this.props.getLatLong(place).then((response)=>{\n                    let latlongs=response.data.map((ele)=>{\n                        return {\n                            lat:ele.lat,\n                            long:ele.lon,\n                            location:ele.display_name,\n                            edit:false\n                        }\n                    })\n                    this.setState({searchResults:latlongs,location:\"\",loading:false});\n                }).catch(error=>{\n                    this.setState({searchResults:[],location:\"\",loading:false});\n                    if(error.response.status===404){\n                        this.props.notifyError(\"Location Not Found\");\n                    }\n                })\n        }    \n    }\n    //set the location on Change event\n    setlocation(event){\n        let location=event.target.value;\n        this.setState({location});\n    }\n    //take to the display view\n    showMarkedPlaces(event){\n        this.props.clearError();\n        this.props.addStatus(\"display\")\n    }\n    render(){\n        return(\n            <div className=\"addMarkerSection\" data-test=\"addMarkerComponent\">\n                 <div className=\"searchBox\"><input type=\"text\" className=\"locationInput\" data-test=\"locationInput\"  value={this.state.location} onChange={(e)=>this.setlocation(e)}/></div>\n                 <div className=\"saveMarker\"><button data-test=\"searchButton\" onClick={(e)=>this.searchResults(e)}>Search</button></div>\n                 <div className=\"showMarkedPlaces\"><button data-test=\"showMarkedPlaces\"  onClick={(e)=>this.showMarkedPlaces(e)}>Show Marked Places</button></div>\n                 <div className=\"searchResults\">\n                    {this.state.searchResults && this.state.searchResults.map((ele)=>{\n                        return (\n                            <div key={ele.location} className=\"blockLevelCard\">\n                                <div className=\"searchedLocations\">{ele.location}</div>\n                                <div><button data-test=\"addToMap\" onClick={(e)=>this.createMarkers(ele)}>Add To Map</button></div>\n                            </div>\n                            )\n                        })\n                    }\n                    {this.props.error && <div><b>{this.props.error}</b></div>}\n                    {this.state.loading && <div>Loading....</div>}\n                </div>    \n            </div>\n        )\n    }\n}\n\nexport { AddMarker as TestAddMarker };\nconst mapStateToProps=(state)=>{\n    return {...state}\n}\n\nexport default connect(mapStateToProps,{\n    getLatLong,\n    createMarker,\n    readMarkers,\n    addStatus,\n    saveMarkers,\n    getAllLatLongs,\n    notification,\n    notifyError,\n    clearError\n})(AddMarker);","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport {deleteMarker,readMarkers,getAllLatLongs,addStatus,editMarker,saveMarkers} from '../actions/markerActions';\n\nclass EditDelete extends Component{\n\n    //add the info Window when clicked on the display card \n    addInfoWindow(event){\n        event.preventDefault();\n        if(window.infowindow){\n            window.infowindow.close();\n        }\n        let {map,placeObject,latLongsArray,markers}=this.props;\n        window.infowindow = new window.google.maps.InfoWindow({\n            content:placeObject.location\n        });\n        latLongsArray.forEach((ele,index)=>{\n            if(ele.location===placeObject.location){\n                window.infowindow.open(map,markers[index]);\n                \n            } \n        })\n          \n        map.setCenter({lat: Number(placeObject.lat), lng: Number(placeObject.long)})\n    }\n    //delete a particular marker from the map and save the new set of markers\n    clearMarker(selectedElement){\n        let {latLongsArray,markers,saveMarkers}=this.props;\n        latLongsArray.forEach((ele,index)=>{\n            if(ele.location===selectedElement.location){\n                markers[index].setMap(null);\n                markers.splice(index,1);\n            } \n       })\n       saveMarkers(markers);\n    }\n    //calls the delete action for deleting a marker and retrieving with the new set of latlongs array\n    deleteMarker(event,ele){\n        event.stopPropagation();\n        if(window.infowindow){\n            window.infowindow.close();\n        }\n        this.props.deleteMarker(ele);\n        this.clearMarker(ele);\n        this.props.readMarkers().then((res)=>{\n            this.props.getAllLatLongs(res.data);\n        });\n    }\n    //calls the edit action and move to the add marker view\n    editMarker(event,latLongElement){\n        event.stopPropagation();\n        if(window.infowindow){\n            window.infowindow.close();\n        }\n       latLongElement.edit=true;\n       this.props.editMarker(latLongElement);\n       this.props.addStatus(\"add\",latLongElement.location);\n    }\n    render(){\n        let {placeObject}=this.props;\n        return(\n            <div className=\"editDeleteCard\" data-test=\"editDeleteComponent\" onClick={(e)=>this.addInfoWindow(e)}>\n                <div className=\"location\">{placeObject.location}</div>\n                <div>\n                    <span><button className=\"editMarker\" data-test=\"editButton\" onClick={(e)=>this.editMarker(e,placeObject)}>Edit</button></span>\n                    <span><button className=\"deleteMarker\" data-test=\"deleteButton\" onClick={(e)=>this.deleteMarker(e,placeObject)}>Delete</button></span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {EditDelete as TestEditDelete}\n\nconst mapStateToProps=(state)=>{\n    return {...state}\n}\n\nexport default connect(mapStateToProps,{\n    deleteMarker,\n    readMarkers,\n    getAllLatLongs,\n    addStatus,\n    editMarker,\n    saveMarkers\n})(EditDelete);","import React,{Component} from 'react';\nimport '../App.css';\nimport Map from './Map';\nimport { connect } from 'react-redux';\nimport {MAP_OPTIONS} from '../util/constant';\nimport {readMarkers,saveMarkers,saveMap,addStatus,getAllLatLongs} from '../actions/markerActions';\nimport AddMarker from './AddMarkers';\nimport EditDelete from './EditDelete';\n\nclass Marker extends Component{\n\n    constructor(props){\n        super(props)\n        //Reading the markers latLong Array,saving them to store ,initializing with display status and finally adding all the available markers\n        this.props.readMarkers().then((res)=>{\n            this.props.getAllLatLongs(res.data);\n            this.props.addStatus(\"display\");\n            this.addMarker(this.props.map);\n        });\n    }\n    \n    //create a single new marker\n    newMarker(map,lat,lng){\n        if(window.google){\n            return new window.google.maps.Marker({\n                    position: { lat,lng },\n                    map: map\n                })\n        }\n    }\n    \n    //create markers for all the available lat and long,saving the map instance along with markers to the store\n    addMarker=(map,latlongsArray)=>{\n        let latLongs=latlongsArray||this.props.latLongsArray;\n        let markers=[];\n        if(latLongs){\n            for(let ele of latLongs){\n                const markerEle= this.newMarker(map,Number(ele.lat),Number(ele.long));\n                markers.push(markerEle);\n            }\n        }\n        if(!this.props.map){\n            this.props.saveMap(map);\n        }\n        this.props.saveMarkers(markers);\n    }\n    \n    render(){\n        return(\n            <div className=\"marker\" data-test=\"markerComponent\">\n                <Map\n                    id=\"markerMap\"\n                    options={MAP_OPTIONS}\n                    onMapLoad={(map)=>this.addMarker(map)}\n                />\n                <div className=\"markerPane\">\n                    {this.props.status===\"add\" && <AddMarker addMarkerProp={this.addMarker} elementToEdit={this.props.elementToEdit} />}\n                    {this.props.status===\"display\" && \n                    <div className=\"displayList\">\n                        <div>\n                            <button className=\"addMarker\" data-test=\"addMarkerButton\" onClick={(e)=>this.props.addStatus(\"add\")}>Add Marker</button>\n                        </div>\n                        <div className=\"markersList\">\n                            {this.props.latLongsArray && this.props.latLongsArray.map((ele,index)=><EditDelete newMarker={this.newMarker} placeObject={ele} key={index}/>)}\n                            {(!this.props.latLongsArray||this.props.latLongsArray.length===0)  && <div>No Marked Places</div>}\n                        </div>\n                    </div>\n                    }\n                    \n                </div>\n            </div>\n        )\n    }\n} \n\nexport {Marker as TestMarker};\n\nconst mapStateToProps=(state)=>{\n    return {...state}\n}\n\nexport default connect(mapStateToProps,{\n    readMarkers,\n    saveMarkers,\n    saveMap,\n    addStatus,\n    getAllLatLongs\n})(Marker);","import React,{Component} from 'react';\nimport './App.css';\nimport Marker from './components/Marker';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\" data-test=\"appComponent\">\n        <Marker/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SAVE_MARKERS,GET_LATLONGS,ERROR,CLEAR_ERROR,SAVE_STATUS,SAVE_MAP,NOTIFY} from '../actions/actionTypes';\n\nlet initialState={};\nexport default function markerReducer(state=initialState,action){\n    switch(action.type){\n        case GET_LATLONGS:\n            return {\n                ...state,\n                latLongsArray:action.latLongs\n            };\n        case SAVE_MARKERS:\n            return {\n                ...state,\n                markers:action.markers\n            };     \n        case NOTIFY:\n            return {\n                ...state,\n                message:action.message\n            }; \n        case SAVE_STATUS:\n            return {\n                ...state,\n                status:action.status,\n                elementToEdit:action.elementToEdit\n            }; \n        case SAVE_MAP:\n            return {\n                ...state,\n                map:action.map\n            };  \n        case ERROR:\n            return {\n                ...state,\n                error:action.error,\n            };\n        case CLEAR_ERROR:\n            delete state.error;\n            return {...state}                 \n        default: return state;       \n    }\n}\n","import thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default applyMiddleware(\n  thunk\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers/markerReducer';\nimport middleware from './middleware';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst store = createStore(reducer, middleware)\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}